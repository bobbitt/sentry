// Include header file
#include "sdlang.h"
#include "sddialog.h"

////////////////////// string defines ////////////////////////////

#define USER 1
/*
  0 = ShareWare
  1 = Registered
*/

// Debugging = 1 for verbose output
#define DEBUG 0

#define UNINST_LOGFILE_NAME     "Uninst.isu"
#define INSTALL_NAME            "install.exe"
#define REGTO                   "Name"
#define REGNO                   "Number"
#define REGCODE                 "Code"
#define LOGFILE                 "Log File"
#define BACKUPLOG               "Backup Log"
#define MSGFILE                 "Msg File"
#define SUPERUSER               "Username"
#define PASSWORD                "Password"
#define VERIFY                  "Verify"
#define REGFILE                 "reginfo.txt"

/*
#define MSDOSSYS                "c:\\msdos.sys"
#define CONFIGSYS               "c:\\config.sys"
#define AUTOEXEC                "c:\\autoexec.bat"
#define MSDOSSEN                "c:\\msdos.sen"
#define CONFIGSEN               "c:\\config.sen"
#define AUTOEXECSEN             "c:\\autoexec.sen"
*/

//////////////////// installation declarations ///////////////////

  // ----- DLL prototypes -----


     // your DLL prototypes


  // ---- script prototypes -----

     // generated
     prototype ShowDialogs();
     prototype MoveFileData();
     prototype HandleMoveDataError( NUMBER );
     prototype ProcessBeforeDataMove();
     prototype ProcessAfterDataMove();
     prototype CleanUpInstall();
     prototype SetupInstall();
     prototype SetupScreen();
     prototype CheckRequirements();
     prototype DialogShowSdWelcome();
     prototype DialogShowSdLicense();
//     prototype DialogShowSdShowInfoList();
     prototype DialogShowSdRegisterUserEx();
//     prototype DialogShowSdFiles();
     prototype DialogShowSdSuperUser();
     prototype DialogShowSdInstallOptions();
     prototype DialogShowSdAskDestPath();
     prototype DialogShowSdSetupType();
     prototype DialogShowSdComponentDialog2();
     prototype RunInstall();
     prototype DialogShowSdFinishReboot();

     // your prototypes


  // ----- global variables ------

     // generated
     BOOL        bWinNT, bIsShellExplorer, bInstallAborted, bIs32BitSetup;
     STRING      svDir;
//     STRING      svName, svCompany, svSerial;
     STRING      svRegTo,svRegNo,svRegCode,svLogFile,svBackupLog,svMsgFile;
     STRING      svSuperUser,svPassword,svVerify;
     STRING      svModSys;
     STRING      svDefGroup;
     STRING      szAppPath;
     STRING      szInstallProgram;
     STRING      svSetupType;
     LIST        listStartCopy;


     // your global variables

///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The following
//      logic then performs the setup in a series of steps.
//
///////////////////////////////////////////////////////////////////////////////
program
    Disable( BACKGROUND );

    CheckRequirements();

    SetupInstall();

    SetupScreen();

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if (RunInstall()<0) goto end_install;

  end_install:

    CleanUpInstall();

     // If an unrecoverable error occurred, clean up the partial installation.
     // Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  ShowDialogs                                                    //
//                                                                           //
//  Purpose:  This function manages the display and navigation               //
//            the standard dialogs that exist in a setup.                    //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult;
 begin

    Dlg_Start:
        // beginning of dialogs label

    Dlg_SdWelcome:
        nResult = DialogShowSdWelcome();
        if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
        nResult = DialogShowSdLicense();
        if (nResult = BACK) goto Dlg_SdWelcome;

    Dlg_SdRegisterUserEx:
        nResult = DialogShowSdRegisterUserEx();
        if (nResult = BACK) goto Dlg_SdLicense;

    Dlg_SdSuperUser:
        nResult = DialogShowSdSuperUser();
        if (nResult = BACK) goto Dlg_SdRegisterUserEx;

    Dlg_SdInstallOptions:
        nResult = DialogShowSdInstallOptions();
        if (nResult = BACK) goto Dlg_SdSuperUser;

    Dlg_SdAskDestPath:
        nResult = DialogShowSdAskDestPath();
        if (nResult = BACK) goto Dlg_SdInstallOptions;

    Dlg_SdSetupType:
        nResult = DialogShowSdSetupType();
        if (nResult = BACK) goto Dlg_SdAskDestPath;

    Dlg_SdComponentDialog2:
        if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
           goto Dlg_SdSetupType;
        endif;
        nResult = DialogShowSdComponentDialog2();
        if (nResult = BACK) goto Dlg_SdSetupType;

    return 0;

 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: ProcessBeforeDataMove                                           //
//                                                                           //
//  Purpose: This function performs any necessary operations prior to the    //
//           actual data move operation.                                     //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()
    STRING svLogFile;
    NUMBER nResult;
 begin

  InstallationInfo( @COMPANY_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );

  svLogFile = UNINST_LOGFILE_NAME;

  nResult = DeinstallStart( svDir, svLogFile, @UNINST_KEY, 0 );
  if (nResult < 0) then
      MessageBox( @ERROR_UNINSTSETUP, WARNING );
  endif;

  szAppPath = TARGETDIR; // TODO : if your application .exe is in a subdir of TARGETDIR then add subdir

  if ((bIs32BitSetup) && (bIsShellExplorer)) then
      RegDBSetItem( REGDB_APPPATH, szAppPath );
      RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
      RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );
  endif;

  // TODO : update any items you want to process before moving the data
  //

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  MoveFileData                                                   //
//                                                                           //
//  Purpose:  This function handles the data movement for                    //
//            the setup.                                                     //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;
 begin

  nDisk = 1;
  SetStatusWindow( 0, "" );
  Disable( DIALOGCACHE );
  Enable( STATUS );
  StatusUpdate( ON, 100 );
  nResult = ComponentMoveData( MEDIA, nDisk, 0 );

  HandleMoveDataError( nResult );

  Disable( STATUS );

  return nResult;

 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: HandleMoveDataError                                             //
//                                                                           //
//  Purpose: This function handles the error (if any) during the move data   //
//           operation.                                                      //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
 begin

  switch (nResult)
  case 0:
       return 0;
  default:
       SprintfBox( SEVERE, @TITLE_CAPTIONBAR, @ERROR_MOVEDATA, nResult );
       bInstallAborted = TRUE;
       return nResult;
  endswitch;

 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: ProcessAfterDataMove                                            //
//                                                                           //
//  Purpose: This function performs any necessary operations needed after    //
//           all data has been moved.                                        //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    STRING szReferenceFile;
 begin

  // TODO : update self-registered files and other processes that
  //        should be performed after the data has been moved.

  // DeinstallSetReference specifies a file to be checked before
  // uninstallation. If the file is in use, uninstallation will not proceed.

  szReferenceFile = svDir ^ @PRODUCT_KEY; // TODO : If your file is in a subdir of svDir add that here
  DeinstallSetReference( szReferenceFile );


  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: CleanUpInstall                                                  //
//                                                                           //
//  Purpose: This cleans up the setup.  Anything that should                 //
//           be released or deleted at the end of the setup should           //
//           be done here.                                                   //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()
 begin

  ListDestroy( listStartCopy );

  if (bInstallAborted) then
      return 0;
  endif;

  DialogShowSdFinishReboot();

  if (BATCH_INSTALL) then // ensure locked files are properly written
      CommitSharedFiles(0);
  endif;

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: SetupInstall                                                    //
//                                                                           //
//  Purpose: This will setup the installation.  Any general initialization   //
//           needed for the installation should be performed here.           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()
 begin

  Enable( CORECOMPONENTHANDLING );

  bInstallAborted = FALSE;

  listStartCopy = ListCreate(STRINGLIST);

  ListAddString( listStartCopy, "Place the summary here.", AFTER );

  if (bIs32BitSetup) then
       svDir = PROGRAMFILES ^ @PRODUCT_NAME;
      // svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @PRODUCT_NAME;
  else
      svDir = PROGRAMFILES ^ @PRODUCT_NAME16; // use shorten names
      // svDir = PROGRAMFILES ^ @COMPANY_NAME16 ^ @PRODUCT_NAME16; // use shorten names
  endif;

  TARGETDIR  = svDir;

  SdProductName( @PRODUCT_NAME );

  Enable( DIALOGCACHE );

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  SetupScreen                                                    //
//                                                                           //
//  Purpose:  This function establishes  the screen look.  This includes     //
//            colors, fonts, and text to be displayed.                       //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()
 begin

  Enable( FULLWINDOWMODE );
  SetTitle( @TITLE_MAIN, 24, WHITE );

  SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.

  Enable( BACKGROUND );

  Delay( 1 );
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  CheckRequirements                                              //
//                                                                           //
//  Purpose:  This function checks all minimum requirements for the          //
//            application being installed.  If any fail, then the user       //
//            is informed and the setup is terminated.                       //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult;

 begin

  bWinNT           = FALSE;
  bIsShellExplorer = FALSE;

  // Check screen resolution.
  GetExtents( nvDx, nvDy );

  if (nvDy < 480) then
      MessageBox( @ERROR_VGARESOLUTION, WARNING );
      abort;
  endif;

  // set 'setup' operation mode
  bIs32BitSetup = TRUE;
  GetSystemInfo( ISTYPE, nvResult, svResult );
  if (nvResult = 16) then
      bIs32BitSetup = FALSE; // running 16-bit setup
      return 0; // no additional information required
  endif;

  // --- 32-bit testing after this point ---

  // Determine the target system's operating system.
  GetSystemInfo( OS, nvResult, svResult );

  if (nvResult =  IS_WINDOWSNT) then
      // Running Windows NT.
      bWinNT = TRUE;

      // Check to see if the shell being used is EXPLORER shell.
      if (GetSystemInfo( OSMAJOR, nvResult, svResult ) = 0) then
          if (nvResult >= 4) then
              bIsShellExplorer = TRUE;
          endif;
      endif;

  elseif (nvResult = IS_WINDOWS95 ) then
      bIsShellExplorer = TRUE;

  endif;

 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdWelcome                                             //
//                                                                           //
//  Purpose: This function handles the standard welcome dialog.              //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;
 begin

  szTitle = "";
  szMsg   = "";

// Neither of these seem to be able to find the bitmap file
//  DialogSetInfo (DLG_INFO_ALTIMAGE,"setup.bmp", TRUE);
// SUPPORTDIR is supposed to be the temp dir.
//  DialogSetInfo (DLG_INFO_ALTIMAGE,SUPPORTDIR ^ "setup.bmp", TRUE);

// Also try:
//PlaceBitmap (szName, nID_BITMAP, nDx, nDy, nDrawOp);
   nResult = SdWelcome( szTitle, szMsg );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdLicense                                             //
//                                                                           //
//  Purpose: This function displays the license agreement dialog.            //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;
 begin

  szLicenseFile = SUPPORTDIR ^ "license.txt";
  szTitle    = "";
  szMsg      = "";
  szQuestion = "";
  nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

  return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdRegisterUserEx                                      //
//                                                                           //
//  Purpose: This function displays the user registration dialog.            //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdRegisterUserEx()
    NUMBER nResult,nvFileHandle;
    BOOL FirstTry;
    STRING svRegFile;
 begin

  svRegTo="";
  svRegNo="";
  svRegCode="";

  svRegFile=SRCDIR+REGFILE;

  FirstTry=TRUE;
  nResult=NEXT;

#if USER
//  MessageBox("Looking for: "+svRegFile,INFORMATION);
  if (Is(FILE_EXISTS,svRegFile))
  then
    OpenFileMode(FILE_MODE_NORMAL);
    OpenFile(nvFileHandle,SRCDIR,REGFILE);
    GetLine(nvFileHandle,svRegTo);
    GetLine(nvFileHandle,svRegNo);
    GetLine(nvFileHandle,svRegCode);
    CloseFile (nvFileHandle);
    MessageBox("You Are using the following registration information:\n\nRegistered To:\t\t"+svRegTo+"\nRegistration Number:\t"+svRegNo+"\nRegistration Code:\t\t"+svRegCode,INFORMATION);
  else
    while (((svRegTo="") || (svRegNo="")|| (svRegCode="")) && (nResult=NEXT))

      if (!FirstTry)
      then
        MessageBox("Please complete all fields.",WARNING);
      endif;
      FirstTry=FALSE;

      nResult = SdShowDlgEdit3("Registration Information","Please enter your registration information as provided.", REGTO, REGNO, REGCODE, svRegTo, svRegNo, svRegCode );
    endwhile;
  endif;
#else
  svRegTo="Shareware";
  svRegNo="19981110";
  svRegCode="ZX";
#endif

/*  if (nResult=NEXT)
  then
    szInstallCmdLine = svRegTo+" "+svRegNo+" "+svRegCode+" "+svLogFile+" "+svBackupLog+" "+svMsgFile+" "+svSuperUser+" "+svPassword+" "+svVerify;

    nResult=LaunchAppAndWait(szInstallProgram,szInstallCmdLine,WAIT);
  endif;

  if (nResult<0)
  then
    nResult=BACK;
  endif;
*/

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdSuperUser                                           //
//                                                                           //
//  Purpose: This function displays the SuperUser dialog.                    //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSuperUser()
    NUMBER nResult;
    BOOL FirstTry;
 begin

  svSuperUser="";
  svPassword="";
  svVerify="";

  FirstTry=TRUE;
  nResult=NEXT;

  while (((svSuperUser="") || (svPassword="")|| (svVerify="")) && (nResult=NEXT))

    if (!FirstTry)
    then
      MessageBox("Please complete all fields.",WARNING);
    endif;
    FirstTry=FALSE;

    nResult = SdShowDlgEdit3("SuperUser Information","Please enter the login information you will use for the primary SuperUser.", SUPERUSER, PASSWORD, VERIFY, svSuperUser, svPassword, svVerify );

    if (svPassword!=svVerify)
    then
      MessageBox("Password does not verify. Try again.",WARNING);
      svPassword="";
      svVerify="";
      FirstTry=TRUE;
    endif;

  endwhile;

  return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdInstallOptions                                      //
//                                                                           //
//  Purpose: This function displays the Install Options dialog.              //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdInstallOptions()
 begin

  if (AskYesNo("Would you like to modify your system files to allow Sentry to run at boot time?",YES)==YES)
  then
    svModSys="1";
  else
    svModSys="0";
  endif;

  return NEXT;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdAskDestPath                                         //
//                                                                           //
//  Purpose: This function asks the user for the destination directory.      //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
    NUMBER nResult;
    STRING szTitle, szMsg;
 begin

  szTitle = "";
  szMsg   = "";
  nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );

  TARGETDIR = svDir;

  // Prepare info to be passed to custom install
  szInstallProgram = svDir+"\\"+INSTALL_NAME;
//  szInstallProgram="c:\\write.bat ";

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdSetupType                                           //
//                                                                           //
//  Purpose: This function displays the standard setup type dialog.          //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSetupType()
    NUMBER nResult, nType;
    STRING szTitle, szMsg;
 begin

//  switch (svSetupType)
//  case "Typical":
//       nType = TYPICAL;
//  case "Custom":
//       nType = CUSTOM;
//  case "Compact":
//       nType = COMPACT;
//  case "":
       svSetupType = "Typical";
       nType = TYPICAL;
//  endswitch;

//  szTitle = "";
//  szMsg   = "";
//  nResult = SetupType( szTitle, szMsg, "", nType, 0 );

//  switch (nResult)
//  case COMPACT:
//       svSetupType = "Compact";
//  case TYPICAL:
//       svSetupType = "Typical";
//  case CUSTOM:
//       svSetupType = "Custom";
//  endswitch;

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdComponentDialog2                                    //
//                                                                           //
//  Purpose: This function displays the custom component dialog.             //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdComponentDialog2()
    NUMBER nResult;
    STRING szTitle, szMsg;
 begin

  if ((svSetupType != "Custom") && (svSetupType != "")) then
      return 0;
  endif;

  szTitle  = "Sentry - Custom Install";
  szMsg    = "";
  nResult  = SdComponentDialog2( szTitle, szMsg, svDir, "" );

  return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: RunInstall                                                      //
//                                                                           //
//  Purpose: This function runs the install.exe file.                        //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function RunInstall()
    NUMBER nResult;
    STRING szInstallCmdLine;
// DEBUG
#if DEBUG
    STRING Message;
#endif
// DEBUG
begin

/*
  if (ConfigFileLoad(MSDOSSYS) < 0)
  then
    MessageBox("ConfigFileLoad failed.", SEVERE);
  endif;

  if (ConfigAdd ("BootKeys","0","[Options]",AFTER) < 0)
  then
    MessageBox ("ConfigAdd failed", WARNING);
    abort;
  endif;

  if (ConfigFileSave(MSDOSSEN) < 0)
  then
    MessageBox("ConfigFileSave failed.", SEVERE);
  endif;
*/


   szInstallCmdLine="\""+svRegTo+"\" \""+svRegNo+"\" \""+svRegCode+"\" \""+svSuperUser+"\" \""+svPassword+"\" \""+svModSys+"\"";

// DEBUG
#if DEBUG
   Message=szInstallProgram+szInstallCmdLine;
   MessageBox(Message,INFORMATION);
#endif
// DEBUG

   MessageBox("To complete the installation, Sentry must run it's custom install program. Please close the DOS box when the \"Finished\" message appears.",INFORMATION);
   nResult=LaunchAppAndWait(szInstallProgram,szInstallCmdLine,WAIT);
//   NumToStr(Message,nResult);
//   Message="Done: "+Message;
//   MessageBox(Message,INFORMATION);
   return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdFinishReboot                                        //
//                                                                           //
//  Purpose: This function will show the last dialog of the product.         //
//           It will allow the user to reboot and/or show some readme text.  //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions;
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;
 begin

  if (!BATCH_INSTALL) then
      bOpt1 = TRUE;
      bOpt2 = FALSE;
      szMsg1 = "The Installation of Sentry is now complete.";
      szMsg2 = "Thank-you for choosing Sentry for your information security needs.";
//      szOption1 = "View the Readme File";
      szOption1 = "";
      szOption2 = "";
      nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );
      if(bOpt1) then
         MessageBox("Display readme file here.", INFORMATION);
      endif;

      return 0;
  endif;

  nDefOptions = SYS_BOOTMACHINE;
  szTitle     = "Install Complete";
  szMsg1      = "The Installation of Sentry is now complete.";
  szMsg2      = "More information here.";
  nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

  return nResult;
 end;

 // --- include script file section ---

#include "sddialog.rul"




